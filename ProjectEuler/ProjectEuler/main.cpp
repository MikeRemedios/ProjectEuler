#include <iostream>
#include <cmath>
#include <vector>
#include <string>
#include <algorithm>
#include <iterator>

/*
* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
* Find the sum of all the multiples of 3 or 5 below 1000.
*/
int Question1()
{
	int total = 0;
	for (int i = 3; i < 1000; ++i)
	{
		if (i % 3 == 0 || i % 5 == 0)
		{
			total += i;
		}
	}
	return total;
}

/*
* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
int Question2()
{
	//even every third term
	int current = 1;
	int last = 0;
	int total = 0;
	while (current <= 4000000)
	{
		current += last;
		last = current - last;
		if (current % 2 == 0)
		{
			total += current;
		}
	}

	return total;
}

template <typename T>
bool IsPrime(T p)
{

	if (p == 2)
	{
		return true;
	}
	else if (p % 2 == 0 || p == 1)
	{
		return false;
	}
	else 
	{
		for (T i = 3; i * i < p; i += 2)
		{
			if (p % i == 0)
				return false;
		}
	}
	return true;
}

template <typename T>
std::vector<T> GetFactors(T n)
{
	std::vector<T> factors;
	for (T i = 1; i * i <= n; ++i)
	{
		if (n % i == 0)
		{
			factors.push_back(i);
			factors.push_back(n / i);
		}
	}
	std::sort(factors.begin(), factors.end());

	return factors;
}

//template<typename T>
//std::vector<T> GetPrimeFactors(T n)
//{
//	std::vector<T> factors = GetFactors(n);
//	factors.erase(std::remove_if(factors.begin(),
//								factors.end(), 
//								[](T p) {	return !IsPrime(p);    }),
//				factors.end());
//
//	for (auto i : factors)
//		std::cout << i << " ";
//	return factors;
//}

template<typename T>
std::vector<T> GetPrimeFactors(T n)
{
	std::vector<T> primes;
	while (n % 2 == 0)
	{
		primes.push_back(2);
		n /= 2;
	}

	for (int i = 3; i <= sqrt(n); i = i + 2)
	{
		// While i divides n, push i and divide n
		while (n%i == 0)
		{
			primes.push_back(i);
			n = n / i;
		}
	}

	// This condition is to handle the case when n is a prime number
	// greater than 2
	if (n > 2)
		primes.push_back(n);

	std::sort(primes.begin(), primes.end());

	return primes;

}

//What is the largest prime factor of the number 600851475143 ?
int Question3()
{
	int largestPrime = 0;
	for (auto i : GetFactors(600851475143))
	{
		if (IsPrime(i))
		{
			if (i > largestPrime)
				largestPrime = i;
		}
	}
	return largestPrime;
}

template<typename T>
bool IsPalindrome(T p)
{
	std::string s = std::to_string(p);
	int l = s.size();

	for (int i = 0; i < l / 2; ++i)
	{
		if (s[i] != s[l - i - 1])
			return false;
	}

	return true;
}

int Question4()
{
	//go by each hundred probably?
	int i = 999;
	while (i >= 900)
	{
		for (int j = 999; j >= 900; --j)
		if (IsPalindrome(i * j))
		{
			return i * j;
		}
		--i;
	}
}

unsigned long long Question5()
{
	std::vector<int> primeFactors;
	for (int i = 2; i <= 20; ++i)
	{
		std::vector<int> p = GetPrimeFactors(i);
		std::set_difference(p.begin(), p.end(), primeFactors.begin(), primeFactors.end(),
			std::inserter(primeFactors, primeFactors.begin()));
		std::sort(primeFactors.begin(), primeFactors.end());
	}

	unsigned long long total = 1;
	for (auto i : primeFactors)
		total *= i;

	return total;
}

int main()
{

	std::cout << Question5() << std::endl;


	system("pause");
	return 0;
}